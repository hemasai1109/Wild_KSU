name: Build OnePlus Nord 3 Stock
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: string
        description: "Configuration file"
        required: true
        default: manifest_stock
      BUILD_TIME:
        type: string
        description: "Custom build time (Enter F to use current time)"
        required: false
        default: "F"
      SUFFIX:
        type: string
        description: "Custom kernel suffix (leave empty for a random string)"
        required: false
        default: "DareDevil‚ö°"
      FAST_BUILD:
        type: boolean
        description: "Enable fast build?"
        required: true
        default: true
      SUSFS_CI:
        type: choice
        description: "SUSFS module download method"
        required: true
        default: CI
        options:
          - CI
          - Release
          - NoN
      KSU_META:
        type: string
        description: "Branch name/Custom version identifier"
        required: false
        default: "susfs-main/DareDevil‚ö°"
      VFS:
        type: boolean
        description: "Enable manual hooks (VFS)?"
        required: true
        default: true
      KPM:
        type: boolean
        description: "Enable Kernel Patch Module (KPM)?"
        required: true
        default: true

jobs:
# JOB 1: NOTIFY THAT THE WORKFLOW HAS STARTED
  notify_start:
    name: Notify Start üöÄ
    runs-on: ubuntu-latest
    steps:
      - name: Get current time
        id: get_time
        run: echo "timestamp=$(TZ='Asia/Kolkata' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      # - name: Send Telegram message on start
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID_PERSONAL }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     format: markdown
      #     message: |
      #       *üöÄ Build Initiated*
      #       ------------------------------------
      #       *Workflow:* `${{ github.workflow }}`
      #       *Run:* `#${{ github.run_number }}`
      #       *Triggered by:* `${{ github.triggering_actor }}`
      #       *Commit:* `${{ github.sha }}`
      #       *Started at:* `${{ steps.get_time.outputs.timestamp }}` IST
      #       ------------------------------------
      #       [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
  build:
    needs: notify_start
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [FAST]' || '' }}For ${{ github.event.inputs.FILE }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Input Combinations
        run: |
          echo "üîß Validating input combinations..."
          FILE="${{ github.event.inputs.FILE }}"
          
          # Define valid combinations with base model only (no _v/_t/_u...)
          declare -A VALID_COMBINATIONS=(
            ["manifest_stock"]="mt6983 android12 5.10"
          )

          # Recursively strip "_[a-z]+" suffixes to match base key
          get_combination() {
            local key="$1"
            while true; do
              if [[ -n "${VALID_COMBINATIONS[$key]+_}" ]]; then
                echo "${VALID_COMBINATIONS[$key]}"
                return 0
              fi
              if [[ "$key" =~ ^(.+)_([a-z]+)$ ]]; then
                key="${BASH_REMATCH[1]}"
              else
                return 1
              fi
            done
          }

          # Try to resolve FILE to a valid combination
          COMBINATION="$(get_combination "$FILE")" || {
            echo "‚ùå Unknown FILE: $FILE"
            echo "Valid base models:"
            for model in "${!VALID_COMBINATIONS[@]}"; do
              echo "- $model: ${VALID_COMBINATIONS[$model]}"
            done
            exit 1
          }

          # Split the combination into fields
          read CPU ANDROID_VERSION KERNEL_VERSION <<< "$COMBINATION"

          echo "‚úÖ Valid combination: FILE=$FILE, CPU=$CPU, ANDROID_VERSION=$ANDROID_VERSION, KERNEL_VERSION=$KERNEL_VERSION"
          
          # Export to environment
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          
          # Set BUILD_METHOD based on ANDROID_VERSION and KERNEL_VERSION
          if [[ "$ANDROID_VERSION" == "android12" && "$KERNEL_VERSION" == "5.10" ]]; then
            echo "BUILD_METHOD=perf" >> $GITHUB_ENV
          else
            echo "BUILD_METHOD=gki" >> $GITHUB_ENV
          fi

      - name: Check Disk Space
        run: df -h

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Create and Enable 3G Swap
        run: |
          sudo swapoff -a
          sudo fallocate -l 3G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Set Cache Environment
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FILE }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FILE }}"
          echo "set: $HOME/.ccache_${{ github.event.inputs.FILE }}"

      - name: Configure Git
        run: |
          git config --global user.name "hemasai1109"
          git config --global user.email "pandunelluri.1109@gmail.com"


      - name: Configure APTC
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: Set APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/sukisu_stock.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Debug Show Selected Inputs
        run: |
          echo "Selected CPU: ${{ env.CPU }}"
          echo "Selected ANDROID_VERSION: ${{ env.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ env.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ env.BUILD_METHOD }}"
          echo "Selected FILE: ${{ github.event.inputs.FILE }}"
          echo "Custom BUILD_TIME: ${{ github.event.inputs.BUILD_TIME }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"
          echo "Selected SUSFS_CI: ${{ github.event.inputs.SUSFS_CI }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Custom KSU_META: ${{ github.event.inputs.KSU_META }}"

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          sudo apt install -y libelf-dev ccache llvm lld

      - name: Restore Ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref_name }}-${{ github.event.inputs.FILE }}-${{ env.BUILD_METHOD }}-${{ github.event.inputs.FAST_BUILD == 'true' && 'alpha' || 'beta' }}-15

      - name: Initialize Ccache
        run: |
          INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "Initializing ccache (${{ env.CCACHE_DIR }})..."
              mkdir -p "${{ env.CCACHE_DIR }}"
              ccache -M ${{ env.CCACHE_MAXSIZE }}
              touch "$INIT_FLAG"
              echo "ccache initialization complete"
            else
              echo "ccache already initialized, skipping"
            fi
          else
            echo "ccache not installed, skipping"
          fi
          ccache -s

      - name: Install Repo Tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize Repo and Sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/hemasai1109/Custom_kernel_OnePlus_Nord3.git -m ${{ github.event.inputs.FILE }}.xml --depth=1
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync


      - name: Copy and Rename Build Configuration
        run: |
          git clone https://github.com/hemasai1109/Custom_kernel_OnePlus_Nord3.git kernel_workflow
          cp -v kernel_workflow/build.config.oplus6983-d kernel_workspace/kernel-5.10/
          echo "pwd cmd!!!!!!!!!!!"
          pwd
          echo "cd kernel_workspace/kernel-5.10 cmd!!!!!!!!!!"
          cd kernel_workspace/kernel-5.10
          echo "ls before rename !!!!!!!!!"
          ls
          
          # --- ADDED STEPS START HERE ---
          
          echo "Renaming the build config file"
          mv build.config.oplus6983-d build.config.oplus6983
          
          echo "Validate the renamed file"
          ls -ls build.config.oplus6983
          
          # --- ADDED STEPS END HERE ---
          
          echo "ls after rename !!!!!!!!!"
          ls
          echo "pwd cmd!!!!!!!!!!!"
          pwd


      - name: Add in bash.rc
        run: |
          echo "BUILD_CONFIG=kernel-5.10/build.config.oplus6983" >> $GITHUB_ENV

      - name: Vendor Issue Fix
        run: |
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd kernel_workspace"
          cd kernel_workspace
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd kernel_module"
          cd kernel_module
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd .."
          cd ..
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "moving every thing one dir up"
          mv kernel_module/vendor .
          echo "pwd"
          pwd
          echo "ls"
          ls
          cd ..
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "rm -rf kernel_module"
          rm -rf kernel_module

      
      - name: Create thermal Makefile
        run: |
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd kernel_workspace"
          cd kernel_workspace
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd & make file"
          cd vendor/oplus/kernel/cpu/thermal && \touch Makefile && \
          echo "obj-y += horae_shell_temp" > Makefile && \
          echo "obj-y += oplus_ipa_thermal" >> Makefile
          echo "THERMAL MAKEFILE!!!!!!!!!!!!"
          echo "pwd"
          pwd
          echo "ls"
          ls
          cat Makefile

      - name: Create Makefile in fingerprint mtk
        run: |
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd to mtk !!!!!!!!"
          cd kernel_workspace/vendor/oplus/secure/biometrics/fingerprints/bsp/drivers_kernel/component3.0/mtk
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "rm Makefile !!!!!!!!"
          rm Makefile 
          cat > Makefile <<'EOF'
          obj-$(CONFIG_OPLUS_FINGERPRINT_COMMON) += oplus_fp_common/

          ### Capacitive fingerprint sensor
          #obj-$(CONFIG_OPLUS_FINGERPRINT_FPC) += fpc/

          #obj-$(CONFIG_OPLUS_FINGERPRINT_EGIS) += egis/

          ### Optical fingerprint sensor
          ifneq ($(CONFIG_OPLUS_FINGERPRINT_GOODIX)_$(CONFIG_OPLUS_FINGERPRINT_GOODIX_OPTICAL), _)
          obj-y += goodix_optical_fp/
          endif
          #obj-$(CONFIG_OPLUS_FINGERPRINT_SILEAD_OPTICAL) += silead_optical_fp/
          #obj-$(CONFIG_OPLUS_FINGERPRINT_EGIS_OPTICAL)   += egis_optical_fp/
          obj-$(CONFIG_OPLUS_FINGERPRINT_JIIOV_OPTICAL)  += anc_driver/
          obj-$(CONFIG_OPLUS_FINGERPRINT_SILEAD_CAP)  += silead/

          ### FEATURE MACRO
          ccflags-$(CONFIG_OPLUS_FINGERPRINT_NAVIGATION_ENABLE) += -DFP_NAVIGATION_ENABLE
          EOF

      - name: Fix codec conflict by editing mt6357-accdet.c file
        run: |
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd to codecs !!!!!!!!"
          cd kernel_workspace/kernel-5.10/sound/soc/codecs/
          echo "pwd"
          pwd
          echo "ls"
          ls
          ls -l mt6357-accdet.c
          sed -i 's/^int accdet_read_audio_res(unsigned int res_value)/int mt6357_accdet_read_audio_res(unsigned int res_value)/' mt6357-accdet.c
          sed -i 's/^EXPORT_SYMBOL(accdet_read_audio_res);/EXPORT_SYMBOL(mt6357_accdet_read_audio_res);/' mt6357-accdet.c
          grep -E 'mt6357_accdet_read_audio_res' mt6357-accdet.c


      # Custom kernel suffix
      - name: Custom Kernel Suffix if set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |

          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          ANDROID_VERSION="${{ env.ANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          for path in \
            kernel-${{ env.KERNEL_VERSION }}/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "Modifying: $path"

            # Remove -dirty
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${ANDROID_VERSION}-${SUFFIX}\"|" "$path"

            elif grep -q 'echo "\$res"' "$path"; then
              echo "Detected OLD setlocalversion format"
              if [ "$FAST_BUILD" = "true" ]; then
                echo "FAST_BUILD enabled: using static res"
                sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${SUFFIX}\"/" "$path"
              else
                echo "Standard build: injecting suffix via cut/echo"
                if [[ -f ./kernel-5.10/build_with_bazel.py ]]; then
                  echo "When using the official script and building with build_with_bazel, the build may fail due to a limit on the number of special characters. Please modify the configuration if that happens."
                fi
                tac "$path" | sed "0,/echo \"\\\$res\"/s//res=\\\$(echo \\\$res | cut -d- -f1-2)-${SUFFIX}; echo \"\\\$res\";/" | tac > "$path.tmp" && mv "$path.tmp" "$path"
              fi
            else
              echo "Unknown format, appending echo manually"
              echo "echo \"\$res-${SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done
          cd kernel-${{ env.KERNEL_VERSION }}
          git add -A
          git commit -m "Custom suffix & removed -dirty"

      - name: Add SukiSU Ultra
        run: |
          cd kernel_workspace/kernel-5.10
          META="${{ github.event.inputs.KSU_META }}"
          BRANCH_NAME="${META%%/*}"
          CUSTOM_TAG="${META#*/}"
          echo "Branch name: $BRANCH_NAME"
          echo "Custom version identifier: $CUSTOM_TAG"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
          cd ./KernelSU
          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
          [[ -z "$KSU_API_VERSION" ]] && KSU_API_VERSION="3.1.7"
          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
          KSU_VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME"
          echo "KSU_VERSION_FULL=$KSU_VERSION_FULL" >> $GITHUB_ENV
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
          echo "KSU_VERSION_API := $KSU_API_VERSION" >> kernel/Makefile
          echo "KSU_VERSION_FULL := $KSU_VERSION_FULL" >> kernel/Makefile
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "::group:: Preview of version information in the final Makefile"
          grep -A5 "KSU_VERSION_API" kernel/Makefile
          echo "::endgroup::"


      - name: Get Kernel Suffix
        id: suffix_step
        run: |
          if [ "${{ github.event.inputs.SUFFIX }}" != "" ]; then
            echo "suffix=${{ github.event.inputs.SUFFIX }}" >> "$GITHUB_OUTPUT"
          else
            echo "suffix=${{ steps.random_suffix_step.outputs.suffix }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel-5.10
          echo "Fetching susfs patches"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/


          GKI_V="${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
          SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
          if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
            echo "Fixing some potential legacy issues for kernel versions 5.15.0 to 5.15.123"
            curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
            patch -p1 < fix_5.15.legacy.patch
            echo "fix_5.15_patch complete"
          fi
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          file="${{ github.event.inputs.FILE }}"
          TRUSTY_EXISTS="false"
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            if grep -qr 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
              TRUSTY_EXISTS="true"
            fi
            echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT
            if [[ "$TRUSTY_EXISTS" == "false" ]]; then
              echo "Fixing susfs issue for some models with kernel version 6.6"
              sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${KERNEL_VERSION}.patch
              sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${KERNEL_VERSION}.patch
            fi
          fi
          echo "Applying susfs patch"
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          echo "susfs_patch complete"

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel-5.10
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          echo "Applying hide stuff patch"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "hide_stuff_patch complete"

      - name: Apply VFS
        if: ${{ github.event.inputs.VFS == 'true' }}
        run: |
          cd kernel_workspace/kernel-5.10
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Applying vfs patch"
          patch -p1 -F 3 < syscall_hooks.patch
          echo "vfs_patch complete"


      # in short more susfs patches
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel-5.10
          CONFIG_FILE=./arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          # SukiSU Ultra configuration
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          # KPM configuration
          if [ "${{ github.event.inputs.KPM }}" = "true" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          fi
          # VFS configuration
          if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi
          # SUSFS configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          # TMPFS configuration*
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          # BBR configuration*
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          # ECN configuration*
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          # Remove build review
          sed -i 's/check_defconfig//' ./build.config.gki


      # Custom kernel build time, do not add #1 SMP PREEMPT
      - name: Custom BUILD_TIME
        if: ${{ github.event.inputs.BUILD_TIME != '' && !contains('Ff', github.event.inputs.BUILD_TIME) }}
        shell: bash
        run: |
          DATESTR="${{ github.event.inputs.BUILD_TIME }}"
          echo "KBUILD_BUILD_TIMESTAMP=${DATESTR}" >> "$GITHUB_ENV"
          echo "KBUILD_BUILD_VERSION=1" >> "$GITHUB_ENV"
          cd kernel_workspace/kernel_platform/
          for f in common/scripts/mkcompile_h msm-kernel/scripts/mkcompile_h; do
            if [ -f "$f" ]; then
              echo "Patching mkcompile_h with BUILD_TIME=$DATESTR"
              if grep -q 'UTS_VERSION=' "$f"; then
                perl -pi -e "s{UTS_VERSION=\"\\\$\\(.*?\\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $DATESTR\"}" "$f"
              else
                perl -0777 -pi -e "s{cat <<EOF}{cat <<EOF\n#undef UTS_VERSION\n#define UTS_VERSION \"#1 SMP PREEMPT $DATESTR\" } unless /UTS_VERSION/" "$f"
              fi
            fi
          done
      
      - name: Build Kernel FAST
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        id: fast_build
        run: |
          echo "cd kernel_workspace/ !!!!!!!!"
          cd kernel_workspace/
          echo "pwd cmd !!!!!!!"
          pwd
          echo "ls cmd !!!!!!!!!"
          ls
          export PATH="/usr/lib/ccache:$PATH"
          export CC="ccache clang"
          ./build/build.sh
           ccache -s

     
      - name: Make AnyKernel3_STOCK
        run: |
          git clone https://github.com/darklord4567/Anykernel3_STOCK_NORD3.git --depth=1
          echo "Copying Image.gz to Anykernel3_STOCK_NORD3/"
          cp kernel_workspace/out/android12-5.10/kernel-5.10/arch/arm64/boot/Image.gz Anykernel3_STOCK_NORD3/Image.gz


      - name: Set zip Suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.VFS == 'true' && '_VFS' || '' }}${{ github.event.inputs.ZRAM == 'true' && '_LZ4KD' || '' }}${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.SCHED== 'true' && '_SCHED' || '' }}" >> $GITHUB_OUTPUT
      
      - name: Upload AnyKernel3_STOCK
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_Stock_${{ steps.file_clean.outputs.value }}${{ steps.suffix.outputs.value }}_DareDevil‚ö°
          path: ./Anykernel3_STOCK_NORD3/*

      - name: Post-build Disk Check
        run: df -h
